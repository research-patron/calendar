Option Explicit

' グローバル変数
Dim dictMunicipalities As Object ' 市町村コードと名前の辞書

' Excelファイルを開いた際に実行される処理
Sub Auto_Open()
    ' 設定シートの初期化
    InitializeSettingsSheet
    ' 市町村コードと名前の辞書の初期化
    InitializeMunicipalityDictionary
End Sub

' 設定シートの初期化
Sub InitializeSettingsSheet()
    Dim ws As Worksheet
    Dim btnCopy As Button
    Dim btnClear As Button
    Dim btnExport As Button
    
    ' 設定シートが存在するか確認
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets("設定")
    On Error GoTo 0
    
    ' 設定シートがなければ作成
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Sheets.Add(Before:=ThisWorkbook.Sheets(1))
        ws.name = "設定"
    End If
    
    ' シートのクリア
    ws.Cells.Clear
    
    ' 列幅を調整
    ws.Columns("A:A").ColumnWidth = 18
    ws.Columns("B:B").ColumnWidth = 50
    ws.Columns("D:D").ColumnWidth = 15
    ws.Columns("E:E").ColumnWidth = 60
    
    ' ヘッダー設定
    ws.Range("A1").Value = "山形県市町村データコピーツール"
    ws.Range("A1").Font.Size = 16
    ws.Range("A1").Font.Bold = True
    ws.Range("A1:B1").Merge
    
    ' ボタン配置
    ' コピー先ファイル選択ボタン
    ws.Buttons.Add(50, 45, 140, 25).Select
    Selection.OnAction = "SelectDestinationFile"
    Selection.Characters.Text = "コピー先ファイル選択"
    
    ' コピー元ファイル選択ボタン
    ws.Buttons.Add(200, 45, 140, 25).Select
    Selection.OnAction = "SelectSourceFiles"
    Selection.Characters.Text = "コピー元ファイル選択"
    
    ' コピー実行ボタン
    ws.Buttons.Add(350, 45, 100, 25).Select
    Selection.OnAction = "ExecuteCopy"
    Selection.Characters.Text = "コピー実行"
    
    ' エクスポートボタン
    ws.Buttons.Add(460, 45, 120, 25).Select
    Selection.OnAction = "ExportSheets"
    Selection.Characters.Text = "シートをエクスポート"
    
    ' クリアボタン（エクスポートボタンの下）
    ws.Buttons.Add(460, 75, 120, 25).Select
    Selection.OnAction = "ClearSettings"
    Selection.Characters.Text = "設定をクリア"
    
    ' ファイルリスト表示エリアのヘッダー
    ws.Range("A6").Value = "選択されたファイル："
    ws.Range("A6").Font.Bold = True
    ws.Range("A7").Value = "コピー先："
    ws.Range("A9").Value = "コピー元："
    
    ' ログ表示エリア（右側に配置）
    ws.Range("E6").Value = "処理ログ："
    ws.Range("E6").Font.Bold = True
    ws.Range("E7").Value = "処理結果がここに表示されます"
    
    ' ファイル名規則の説明を追加（下部に配置、結合セルは使わない）
    ws.Range("A20").Value = "【ファイル名規則】"
    ws.Range("A20").Font.Bold = True
    ws.Range("A21").Value = "コピー元ファイル名は「市町村コード_市町村名.xlsx」形式である必要があります"
    ws.Range("A22").Value = "例：201_山形市.xlsx、203_鶴岡市.xlsx、999_流域.xlsx"
    ws.Range("A21:A22").Font.Size = 9
    
    ' 区切り線を追加
    ws.Range("A5:E5").Borders(xlEdgeBottom).LineStyle = xlContinuous
    ws.Range("A19:E19").Borders(xlEdgeBottom).LineStyle = xlContinuous
    
    ' 背景色を設定
    ws.Range("A1:E1").Interior.Color = RGB(200, 230, 201)
    ws.Range("A20:E22").Interior.Color = RGB(255, 243, 205)
End Sub

' 市町村コードと名前の辞書の初期化
Sub InitializeMunicipalityDictionary()
    ' 辞書オブジェクトの作成
    Set dictMunicipalities = CreateObject("Scripting.Dictionary")
    
    ' 山形県の市町村コードと名前のマッピング
    dictMunicipalities.Add "201", "山形市"
    dictMunicipalities.Add "202", "米沢市"
    dictMunicipalities.Add "203", "鶴岡市"
    dictMunicipalities.Add "204", "酒田市"
    dictMunicipalities.Add "205", "新庄市"
    dictMunicipalities.Add "206", "寒河江市"
    dictMunicipalities.Add "207", "上山市"
    dictMunicipalities.Add "208", "村山市"
    dictMunicipalities.Add "209", "長井市"
    dictMunicipalities.Add "210", "天童市"
    dictMunicipalities.Add "211", "東根市"
    dictMunicipalities.Add "213", "南陽市"
    dictMunicipalities.Add "301", "山辺町"
    dictMunicipalities.Add "302", "中山町"
    dictMunicipalities.Add "321", "河北町"
    dictMunicipalities.Add "322", "西川町"
    dictMunicipalities.Add "323", "朝日町"
    dictMunicipalities.Add "324", "大江町"
    dictMunicipalities.Add "361", "金山町"
    dictMunicipalities.Add "362", "最上町"
    dictMunicipalities.Add "363", "舟形町"
    dictMunicipalities.Add "364", "真室川町"
    dictMunicipalities.Add "365", "大蔵村"
    dictMunicipalities.Add "366", "鮭川村"
    dictMunicipalities.Add "367", "戸沢村"
    dictMunicipalities.Add "381", "高畠町"
    dictMunicipalities.Add "382", "川西町"
    dictMunicipalities.Add "401", "小国町"
    dictMunicipalities.Add "402", "白鷹町"
    dictMunicipalities.Add "403", "飯豊町"
    dictMunicipalities.Add "426", "三川町"
    dictMunicipalities.Add "428", "庄内町"
    dictMunicipalities.Add "461", "遊佐町"
    dictMunicipalities.Add "901", "尾大環"
    dictMunicipalities.Add "999", "流域"
End Sub

' ファイル名が標準形式かチェックする関数
Function IsValidFileName(fileName As String) As Boolean
    Dim fname As String
    Dim pos As Integer
    Dim code As String
    Dim name As String
    
    IsValidFileName = False
    
    ' ファイル名のみを取得 (パスなし)
    pos = InStrRev(fileName, "\")
    If pos > 0 Then
        fname = Mid(fileName, pos + 1)
    Else
        fname = fileName
    End If
    
    ' 拡張子を除去
    pos = InStrRev(fname, ".")
    If pos > 0 Then
        fname = Left(fname, pos - 1)
    End If
    
    ' 括弧がある場合は除去
    fname = Replace(fname, "(", "")
    fname = Replace(fname, "（", "")
    fname = Replace(fname, ")", "")
    fname = Replace(fname, "）", "")
    
    ' 市町村コードと名前を抽出
    pos = InStr(fname, "_")
    If pos > 0 Then
        code = Left(fname, pos - 1)
        name = Mid(fname, pos + 1)
        
        ' 市町村コードの数字チェック
        If IsNumeric(code) Then
            ' 市町村コードの末尾3桁を取得
            If Len(code) >= 3 Then
                code = Right(code, 3)
                
                ' 辞書に登録されているかチェック
                If dictMunicipalities.Exists(code) Then
                    ' 名前も一致するかチェック
                    If dictMunicipalities(code) = name Then
                        IsValidFileName = True
                    End If
                End If
            End If
        End If
    End If
End Function

' コピー先ファイル選択
Sub SelectDestinationFile()
    Dim fd As FileDialog
    Dim destFile As String
    Dim ws As Worksheet
    
    Set ws = ThisWorkbook.Sheets("設定")
    
    ' ファイル選択ダイアログを表示
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "コピー先ファイルを選択"
        .AllowMultiSelect = False
        .Filters.Add "Excel ファイル", "*.xlsx; *.xls"
        
        If .Show = True Then
            destFile = .SelectedItems(1)
            ' 選択されたファイルを表示
            ws.Range("B7").Value = destFile
        End If
    End With
End Sub

' コピー元ファイル選択
Sub SelectSourceFiles()
    Dim fd As FileDialog
    Dim i As Integer
    Dim ws As Worksheet
    Dim response As VbMsgBoxResult
    Dim currentFileCount As Integer
    Dim lastRow As Long
    Dim startIndex As Integer
    Dim validFiles As Collection
    Dim invalidFiles As Collection
    Dim fileName As String
    Dim invalidFileList As String
    
    Set ws = ThisWorkbook.Sheets("設定")
    Set validFiles = New Collection
    Set invalidFiles = New Collection
    
    ' 現在のコピー元ファイル数を正確に確認
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    If lastRow > 8 Then
        currentFileCount = lastRow - 8
    Else
        currentFileCount = 0
    End If
    
    WriteLog "現在のファイル数: " & currentFileCount & "件"
    
    ' 既存ファイルがある場合のみ確認ダイアログを表示
    If currentFileCount > 0 Then
        response = MsgBox("現在選択されている " & currentFileCount & " 件のファイルがあります。" & vbCrLf & _
                         "どちらを選択しますか？" & vbCrLf & vbCrLf & _
                         "「はい」：現在のリストに追加" & vbCrLf & _
                         "「いいえ」：現在のリストをクリアして新規選択" & vbCrLf & _
                         "「キャンセル」：操作を中止", _
                         vbYesNoCancel + vbQuestion, "ファイル選択方式")
        
        Select Case response
            Case vbYes
                ' 現在のリストに追加
                startIndex = currentFileCount + 1
                WriteLog "追加モードでファイル選択します"
            Case vbNo
                ' 現在のリストをクリア
                If lastRow > 8 Then
                    ws.Range("A9:B" & lastRow).ClearContents
                End If
                startIndex = 1
                WriteLog "リストをクリアして新規選択します"
            Case vbCancel
                ' 処理中止
                WriteLog "ファイル選択をキャンセルしました"
                Exit Sub
        End Select
    Else
        ' 既存ファイルがない場合
        startIndex = 1
        WriteLog "新規ファイル選択を開始します"
    End If
    
    ' ファイル選択ダイアログを表示（Excelファイルのみに限定）
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "コピー元ファイルを選択（Excelファイルのみ）"
        .AllowMultiSelect = True
        .Filters.Clear
        .Filters.Add "Excel ファイル", "*.xlsx; *.xls; *.xlsm"
        
        If .Show = True Then
            ' 選択されたファイルの検証
            For i = 1 To .SelectedItems.Count
                fileName = .SelectedItems(i)
                ' Excelファイルかつ有効なファイル名かチェック
                If (Right(LCase(fileName), 5) = ".xlsx" Or Right(LCase(fileName), 4) = ".xls" Or Right(LCase(fileName), 5) = ".xlsm") And IsValidFileName(fileName) Then
                    validFiles.Add fileName
                    WriteLog "有効ファイル: " & Dir(fileName)
                Else
                    invalidFiles.Add fileName
                    WriteLog "無効ファイル: " & Dir(fileName)
                End If
            Next i
            
            ' 無効なファイルがある場合はエラーメッセージを表示
            If invalidFiles.Count > 0 Then
                invalidFileList = ""
                For i = 1 To invalidFiles.Count
                    invalidFileList = invalidFileList & Dir(invalidFiles(i)) & vbCrLf
                Next i
                
                MsgBox "以下のファイルは標準形式ではないため選択できません：" & vbCrLf & vbCrLf & _
                       invalidFileList & vbCrLf & _
                       "ファイル名は「市町村コード_市町村名.xlsx」形式である必要があります。" & vbCrLf & _
                       "例：201_山形市.xlsx、203_鶴岡市.xlsx、999_流域.xlsx", _
                       vbExclamation, "ファイル名エラー"
                
                WriteLog "エラー: " & invalidFiles.Count & "件の無効ファイルを検出"
            End If
            
            ' 有効なファイルのみをリストに追加
            If validFiles.Count > 0 Then
                For i = 1 To validFiles.Count
                    ws.Cells(8 + startIndex + i - 1, 1).Value = startIndex + i - 1
                    ws.Cells(8 + startIndex + i - 1, 2).Value = validFiles(i)
                    WriteLog "ファイル追加: " & Dir(validFiles(i))
                Next i
                WriteLog "ファイル選択完了: " & validFiles.Count & "件選択（有効ファイルのみ）"
            Else
                WriteLog "有効なファイルが選択されませんでした"
            End If
        Else
            WriteLog "ファイル選択がキャンセルされました"
        End If
    End With
End Sub

' ファイル名から市町村コードと名前を抽出（厳格版）
Function ExtractMunicipalityInfo(fileName As String) As Variant
    Dim result(1) As String
    Dim fname As String
    Dim pos As Integer
    Dim code As String
    Dim name As String
    
    result(0) = ""
    result(1) = ""
    
    ' ファイル名のみを取得 (パスなし)
    pos = InStrRev(fileName, "\")
    If pos > 0 Then
        fname = Mid(fileName, pos + 1)
    Else
        fname = fileName
    End If
    
    ' 拡張子を除去
    pos = InStrRev(fname, ".")
    If pos > 0 Then
        fname = Left(fname, pos - 1)
    End If
    
    WriteLog "ファイル名解析: " & fname
    
    ' 括弧がある場合は除去
    fname = Replace(fname, "(", "")
    fname = Replace(fname, "（", "")
    fname = Replace(fname, ")", "")
    fname = Replace(fname, "）", "")
    
    ' 市町村コードと名前を抽出
    pos = InStr(fname, "_")
    If pos > 0 Then
        code = Left(fname, pos - 1)
        name = Mid(fname, pos + 1)
        
        ' 市町村コードの末尾3桁を取得
        If Len(code) >= 3 And IsNumeric(code) Then
            code = Right(code, 3)
            
            ' 辞書に存在し、名前も一致するかチェック
            If dictMunicipalities.Exists(code) And dictMunicipalities(code) = name Then
                result(0) = code
                result(1) = name
                WriteLog "抽出成功: コード=" & code & ", 名前=" & name
            Else
                WriteLog "抽出失敗: 辞書に存在しないか名前が不一致"
            End If
        Else
            WriteLog "抽出失敗: 市町村コードが無効"
        End If
    Else
        WriteLog "抽出失敗: アンダースコア区切りなし"
    End If
    
    ExtractMunicipalityInfo = result
End Function

' シート内で市町村コードや名前を検索する関数
Function FindMunicipalityInSheet(ws As Worksheet, code As String, name As String) As Long
    Dim i As Long, j As Long
    Dim cellValue As String
    Dim cellCode As String
    
    WriteLog "    シート「" & ws.name & "」で市町村検索: " & name & "(コード:" & code & ")"
    
    ' シート内をスキャンして市町村コードまたは名前を検索
    For i = 1 To ws.UsedRange.Rows.Count
        For j = 1 To ws.UsedRange.Columns.Count
            If Not IsEmpty(ws.Cells(i, j).Value) Then
                cellValue = CStr(ws.Cells(i, j).Value)
                
                ' 数値の場合は市町村コードとして比較
                If IsNumeric(ws.Cells(i, j).Value) And ws.Cells(i, j).Value > 0 Then
                    cellCode = cellValue
                    ' 末尾3桁を取得
                    If Len(cellCode) >= 3 Then
                        cellCode = Right(cellCode, 3)
                        If cellCode = code Then
                            WriteLog "    見つかりました: 行" & i & ", セル値=" & ws.Cells(i, j).Value
                            FindMunicipalityInSheet = i
                            Exit Function
                        End If
                    End If
                ElseIf Len(cellValue) > 0 Then
                    ' 文字列の場合は市町村名として比較
                    If InStr(cellValue, name) > 0 Or cellValue = name Then
                        WriteLog "    見つかりました: 行" & i & ", セル値=" & cellValue
                        FindMunicipalityInSheet = i
                        Exit Function
                    End If
                End If
            End If
        Next j
    Next i
    
    WriteLog "    見つかりませんでした"
    ' 見つからない場合は0を返す
    FindMunicipalityInSheet = 0
End Function

' ログを設定シートに出力する関数
Sub WriteLog(message As String)
    Dim ws As Worksheet
    Dim lastRow As Long
    
    Set ws = ThisWorkbook.Sheets("設定")
    
    ' ログ出力エリアの最後の行を取得（E列に変更）
    lastRow = ws.Cells(ws.Rows.Count, "E").End(xlUp).Row
    If lastRow < 7 Then lastRow = 7
    
    ' ログを出力
    ws.Cells(lastRow + 1, 5).Value = Format(Now, "hh:mm:ss") & " " & message
End Sub

' コピー処理の実行（安全版：外部ファイルは一切変更しない）
Sub ExecuteCopy()
    Dim ws As Worksheet
    Dim destFile As String
    Dim sourceFiles() As String
    Dim i As Integer, j As Integer
    Dim lastRow As Long
    Dim sourceCount As Integer
    Dim wbDest As Workbook, wbSource As Workbook
    Dim wsDest As Worksheet, wsSource As Worksheet, wsTarget As Worksheet
    Dim munInfo As Variant
    Dim code As String, name As String
    Dim sourceRow As Long, destRow As Long
    Dim processedCount As Integer
    Dim skippedCount As Integer
    Dim skippedSheetCount As Integer
    Dim processedSheets As Collection
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Set ws = ThisWorkbook.Sheets("設定")
    Set processedSheets = New Collection
    
    ' ログエリアをクリア
    ws.Range("E8:E1000").ClearContents
    
    WriteLog "処理を開始します（外部ファイルは変更しません）..."
    
    ' コピー先ファイルを取得
    destFile = ws.Range("B7").Value
    If destFile = "" Then
        WriteLog "エラー: コピー先ファイルが選択されていません。"
        MsgBox "コピー先ファイルを選択してください。", vbExclamation
        GoTo CleanExit
    End If
    
    ' コピー元ファイルの数を取得
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    sourceCount = lastRow - 8
    If sourceCount <= 0 Then
        WriteLog "エラー: コピー元ファイルが選択されていません。"
        MsgBox "コピー元ファイルを選択してください。", vbExclamation
        GoTo CleanExit
    End If
    
    ' コピー元ファイルを配列に格納（空でないセルのみ）
    ReDim sourceFiles(1 To sourceCount)
    Dim actualCount As Integer
    actualCount = 0
    
    For i = 1 To sourceCount
        Dim filePath As String
        filePath = Trim(ws.Cells(8 + i, 2).Value)
        
        ' ファイルパスが空でない場合のみ追加
        If filePath <> "" Then
            ' ファイルが実際に存在するかチェック
            If Dir(filePath) <> "" Then
                actualCount = actualCount + 1
                ReDim Preserve sourceFiles(1 To actualCount)
                sourceFiles(actualCount) = filePath
                WriteLog "処理対象ファイル確認: " & Dir(filePath)
            Else
                WriteLog "警告: ファイルが見つかりません - " & filePath
                skippedCount = skippedCount + 1
            End If
        End If
    Next i
    
    If actualCount = 0 Then
        WriteLog "エラー: 処理可能なファイルがありません。"
        MsgBox "処理可能なファイルがありません。", vbExclamation
        GoTo CleanExit
    End If
    
    WriteLog "コピー先ファイル（雛形）を読み取り専用で開いています..."
    
    ' コピー先ファイルを読み取り専用で開く
    On Error GoTo ErrorHandler
    Set wbDest = Workbooks.Open(destFile, ReadOnly:=True)
    On Error GoTo 0
    
    WriteLog "現在のファイルに統合シートを作成中..."
    
    ' 現在のファイルに雛形のシートをコピー（設定シート以外）
    For Each wsDest In wbDest.Sheets
        If wsDest.name <> "設定" Then
            ' 既存の同名シートがあるかチェック
            Set wsTarget = Nothing
            On Error Resume Next
            Set wsTarget = ThisWorkbook.Sheets(wsDest.name)
            On Error GoTo 0
            
            If wsTarget Is Nothing Then
                ' 新規シートを作成
                Set wsTarget = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
                wsTarget.name = wsDest.name
                WriteLog "新規シート「" & wsDest.name & "」を作成しました"
            Else
                ' 既存シートをクリア
                wsTarget.Cells.Clear
                WriteLog "既存シート「" & wsDest.name & "」をクリアしました"
            End If
            
            ' 雛形データをコピー
            wsDest.UsedRange.Copy
            wsTarget.Range("A1").PasteSpecial xlPasteAll
            Application.CutCopyMode = False
            wsTarget.Columns.AutoFit
            
            processedSheets.Add wsDest.name
            WriteLog "雛形データをコピー: シート「" & wsDest.name & "」"
        End If
    Next wsDest
    
    WriteLog "処理対象ファイル数: " & actualCount & "件"
    
    ' 各コピー元ファイルを処理
    For i = 1 To actualCount
        ' コピー元ファイルから市町村情報を抽出
        munInfo = ExtractMunicipalityInfo(sourceFiles(i))
        code = munInfo(0)
        name = munInfo(1)
        
        If code = "" Or name = "" Then
            WriteLog "スキップ: ファイル名から市町村情報を取得できませんでした - " & Dir(sourceFiles(i))
            skippedCount = skippedCount + 1
            GoTo NextFile
        End If
        
        WriteLog "処理中: " & name & " (コード:" & code & ")"
        
        ' コピー元ファイルを読み取り専用で開く
        On Error GoTo ErrorHandler
        Set wbSource = Workbooks.Open(sourceFiles(i), ReadOnly:=True)
        On Error GoTo 0
        
        ' 各シートについて処理
        Dim sheetProcessed As Boolean
        sheetProcessed = False
        
        For j = 1 To wbSource.Sheets.Count
            Set wsSource = wbSource.Sheets(j)
            
            ' 現在のファイルに同名のシートがあるか確認
            On Error Resume Next
            Set wsTarget = ThisWorkbook.Sheets(wsSource.name)
            On Error GoTo 0
            
            If Not wsTarget Is Nothing Then
                ' 両方のシートで市町村コードまたは名前を検索
                sourceRow = FindMunicipalityInSheet(wsSource, code, name)
                destRow = FindMunicipalityInSheet(wsTarget, code, name)
                
                If sourceRow > 0 And destRow > 0 Then
                    ' データを現在のファイル内のシートに統合
                    Call IntegrateMunicipalityData(wsSource, wsTarget, sourceRow, destRow, code, name)
                    WriteLog "  統合完了: シート「" & wsSource.name & "」"
                    sheetProcessed = True
                ElseIf sourceRow = 0 Then
                    WriteLog "  スキップ: コピー元シート「" & wsSource.name & "」に" & name & "のデータが見つかりません"
                    skippedSheetCount = skippedSheetCount + 1
                ElseIf destRow = 0 Then
                    WriteLog "  スキップ: 統合先シート「" & wsSource.name & "」に" & name & "のデータが見つかりません"
                    skippedSheetCount = skippedSheetCount + 1
                End If
            End If
        Next j
        
        If sheetProcessed Then
            processedCount = processedCount + 1
        Else
            WriteLog "  スキップ: " & name & " - 処理可能なシートがありませんでした"
            skippedCount = skippedCount + 1
        End If
        
        ' コピー元ファイルを保存せずに閉じる
        wbSource.Close SaveChanges:=False
        
NextFile:
    Next i
    
    ' コピー先ファイル（雛形）を保存せずに閉じる
    wbDest.Close SaveChanges:=False
    
    WriteLog "処理完了: " & processedCount & "件処理, " & skippedCount & "件スキップ, " & skippedSheetCount & "シートスキップ"
    WriteLog "外部ファイルは一切変更されていません。"
    MsgBox "データ統合処理が完了しました。" & vbCrLf & _
           "処理件数: " & processedCount & "件" & vbCrLf & _
           "スキップ件数: " & skippedCount & "件" & vbCrLf & _
           "スキップシート数: " & skippedSheetCount & "シート" & vbCrLf & vbCrLf & _
           "※外部ファイルは一切変更されていません。" & vbCrLf & _
           "詳細は設定シートのログをご確認ください。"

CleanExit:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Exit Sub

ErrorHandler:
    WriteLog "エラー: " & Err.Description
    MsgBox "エラーが発生しました: " & Err.Description
    Resume CleanExit
End Sub

' 市町村データの統合処理（上書き方式、必要時のみ行追加）
Sub IntegrateMunicipalityData(wsSource As Worksheet, wsTarget As Worksheet, sourceStartRow As Long, targetStartRow As Long, code As String, name As String)
    Dim sourceEndRow As Long, targetEndRow As Long
    Dim sourceDataRows As Long, targetDataRows As Long
    Dim copyRange As Range
    
    ' コピー元の終了行を特定
    sourceEndRow = FindNextMunicipalityRow(wsSource, sourceStartRow + 1, code)
    If sourceEndRow = 0 Then sourceEndRow = wsSource.UsedRange.Rows.Count + 1
    
    ' 統合先の終了行を特定
    targetEndRow = FindNextMunicipalityRow(wsTarget, targetStartRow + 1, code)
    If targetEndRow = 0 Then targetEndRow = wsTarget.UsedRange.Rows.Count + 1
    
    ' データ行数を計算
    sourceDataRows = sourceEndRow - sourceStartRow
    targetDataRows = targetEndRow - targetStartRow
    
    WriteLog "    データ行数比較: コピー元=" & sourceDataRows & "行, 統合先=" & targetDataRows & "行"
    
    ' コピー元の行数が統合先より多い場合のみ行を追加
    If sourceDataRows > targetDataRows Then
        ' 足りない行数を追加（該当市町村データの下に）
        Dim insertRows As Long
        insertRows = sourceDataRows - targetDataRows
        wsTarget.Rows(targetEndRow).Resize(insertRows).Insert Shift:=xlDown
        WriteLog "    行追加: " & insertRows & "行を該当市町村データの下に追加"
    End If
    
    ' データを統合（上書き方式、数式・書式・値すべて）
    Set copyRange = wsSource.Rows(sourceStartRow).Resize(sourceDataRows)
    copyRange.Copy
    
    ' 値、数式、書式をすべて上書き統合（色付けなし）
    wsTarget.Cells(targetStartRow, 1).PasteSpecial xlPasteAll
    
    Application.CutCopyMode = False
    
    WriteLog "    統合完了: " & sourceDataRows & "行のデータを上書き統合"
End Sub

' 次の市町村データの開始行を検索
Function FindNextMunicipalityRow(ws As Worksheet, startRow As Long, currentCode As String) As Long
    Dim i As Long, j As Long
    Dim cellValue As String
    Dim cellCode As String
    
    For i = startRow To ws.UsedRange.Rows.Count
        For j = 1 To ws.UsedRange.Columns.Count
            If IsNumeric(ws.Cells(i, j).Value) Then
                cellCode = CStr(ws.Cells(i, j).Value)
                ' 末尾3桁を取得
                If Len(cellCode) >= 3 Then
                    cellCode = Right(cellCode, 3)
                    If dictMunicipalities.Exists(cellCode) And cellCode <> currentCode Then
                        FindNextMunicipalityRow = i
                        Exit Function
                    End If
                End If
            End If
        Next j
    Next i
    
    FindNextMunicipalityRow = 0
End Function

' 設定のクリア（必要な項目は保持）
Sub ClearSettings()
    Dim ws As Worksheet
    Dim lastRow As Long
    
    Set ws = ThisWorkbook.Sheets("設定")
    
    WriteLog "設定をクリアします..."
    
    ' コピー先ファイルをクリア
    ws.Range("B7").ClearContents
    WriteLog "コピー先ファイルをクリアしました"
    
    ' コピー元ファイルリストをクリア（9行目以降のA列とB列のみ）
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow > 9 Then
        ws.Range("A9:A" & lastRow).ClearContents
        ws.Range("B9:B" & lastRow).ClearContents
        WriteLog "コピー元ファイルリストをクリアしました（" & (lastRow - 8) & "件）"
    End If
    
    ' 処理で作成されたシートを削除
    Call DeleteCreatedSheets
    
    ' ログをクリア（ヘッダーは保持）
    ws.Range("E8:E1000").ClearContents
    ws.Range("E7").Value = "処理結果がここに表示されます"
    
    WriteLog "すべての設定とシートがクリアされました。"
    
    MsgBox "設定のクリアが完了しました。" & vbCrLf & _
           "・コピー先ファイル: クリア" & vbCrLf & _
           "・コピー元ファイルリスト: クリア" & vbCrLf & _
           "・処理で作成されたシート: 削除" & vbCrLf & _
           "・処理ログ: クリア", vbInformation, "クリア完了"
End Sub

' 処理で作成されたシートを削除する関数
Sub DeleteCreatedSheets()
    Dim ws As Worksheet
    Dim sheetsToDelete As Collection
    Dim sheetName As String
    Dim deletedCount As Integer
    
    Set sheetsToDelete = New Collection
    
    ' 削除対象のシートを特定（設定シート以外）
    For Each ws In ThisWorkbook.Sheets
        If ws.name <> "設定" Then
            sheetsToDelete.Add ws.name
        End If
    Next ws
    
    ' シートを削除
    If sheetsToDelete.Count > 0 Then
        Application.DisplayAlerts = False
        
        Dim i As Integer
        For i = 1 To sheetsToDelete.Count
            sheetName = sheetsToDelete(i)
            On Error Resume Next
            ThisWorkbook.Sheets(sheetName).Delete
            If Err.Number = 0 Then
                WriteLog "シート「" & sheetName & "」を削除しました"
                deletedCount = deletedCount + 1
            Else
                WriteLog "シート「" & sheetName & "」の削除に失敗: " & Err.Description
            End If
            On Error GoTo 0
        Next i
        
        Application.DisplayAlerts = True
        WriteLog "処理で作成されたシートを削除しました（" & deletedCount & "件）"
    Else
        WriteLog "削除対象のシートがありません"
    End If
End Sub

' シートのエクスポート
Sub ExportSheets()
    Dim wbNew As Workbook
    Dim wsSource As Worksheet
    Dim wsTarget As Worksheet
    Dim filePath As Variant
    Dim fileName As String
    Dim originalFileName As String
    Dim exportCount As Integer
    
    ' 現在のファイルに統合シートが存在するかチェック
    Dim hasSheets As Boolean
    hasSheets = False
    
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If ws.name <> "設定" Then
            hasSheets = True
            Exit For
        End If
    Next ws
    
    If Not hasSheets Then
        MsgBox "エクスポートするシートがありません。先にコピー処理を実行してください。"
        Exit Sub
    End If
    
    ' コピー先ファイル名から元のファイル名を取得
    originalFileName = ThisWorkbook.Sheets("設定").Range("B7").Value
    If originalFileName <> "" Then
        ' パスを除去してファイル名のみ取得
        Dim pos As Integer
        pos = InStrRev(originalFileName, "\")
        If pos > 0 Then
            originalFileName = Mid(originalFileName, pos + 1)
        End If
        
        ' 拡張子を除去
        pos = InStrRev(originalFileName, ".")
        If pos > 0 Then
            originalFileName = Left(originalFileName, pos - 1)
        End If
        
        ' デフォルトファイル名を設定
        fileName = "山形県_" & originalFileName & ".xlsx"
    Else
        fileName = "山形県_調査結果.xlsx"
    End If
    
    ' ファイル保存ダイアログを表示（GetSaveAsFilenameを使用）
    filePath = Application.GetSaveAsFilename( _
        InitialFilename:=fileName, _
        FileFilter:="Excel ファイル (*.xlsx), *.xlsx", _
        Title:="統合ファイルの保存先とファイル名を指定")
    
    ' キャンセルされた場合
    If filePath = False Then
        Exit Sub
    End If
    
    WriteLog "統合ファイルのエクスポートを開始します..."
    
    ' 新しいブックを作成
    Set wbNew = Workbooks.Add
    
    ' デフォルトのシートを削除
    Application.DisplayAlerts = False
    While wbNew.Sheets.Count > 1
        wbNew.Sheets(wbNew.Sheets.Count).Delete
    Wend
    Application.DisplayAlerts = True
    
    ' 最初のシートの名前を一時的に変更
    wbNew.Sheets(1).name = "TempSheet"
    
    ' 設定シート以外の各シートをコピー
    For Each wsSource In ThisWorkbook.Sheets
        If wsSource.name <> "設定" Then
            ' シートをコピー
            wsSource.Copy After:=wbNew.Sheets(wbNew.Sheets.Count)
            exportCount = exportCount + 1
            WriteLog "シート「" & wsSource.name & "」をエクスポートしました"
        End If
    Next wsSource
    
    ' 一時シートを削除
    Application.DisplayAlerts = False
    wbNew.Sheets("TempSheet").Delete
    Application.DisplayAlerts = True
    
    ' ファイルを保存
    wbNew.SaveAs filePath, FileFormat:=xlOpenXMLWorkbook
    
    ' ブックを閉じる
    wbNew.Close SaveChanges:=False
    
    WriteLog "統合エクスポート完了: " & exportCount & "シート"
    MsgBox "統合ファイルのエクスポートが完了しました。" & vbCrLf & _
           "エクスポートシート数: " & exportCount & "シート" & vbCrLf & _
           "保存先: " & filePath
End Sub

' CopyResultsToCurrentFile関数は不要になったため削除または簡素化
