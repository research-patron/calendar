Option Explicit

Public Sub DrawCalendar()
    Dim wsCalendar As Worksheet
    Dim lastTaskRow As Long
    Dim r As Long, c As Long
    Dim currentDate As Date
    Dim numMonthsToDisplay As Integer
    Dim ganttStartColNum As Integer
    Dim ganttEndColNum As Long
    Dim taskStartDate As Date, taskEndDate As Date
    Dim tempDate As Date
    Dim btnShape As Shape
    Dim todayColNum As Long
    Dim dataStartRow As Long

    dataStartRow = CALENDAR_HEADER_ROWS + 1 ' 通常3
    ganttStartColNum = Columns(GANTT_START_COL_LETTER).Column

    Set wsCalendar = GetSheet(CALENDAR_SHEET_NAME)
    If wsCalendar Is Nothing Then
    ShowError "DrawCalendar: Calendar sheet not found."
        Exit Sub
    End If

    Application.ScreenUpdating = False
    
    For Each btnShape In wsCalendar.Shapes
        If btnShape.Type = msoFormControl And btnShape.FormControlType = xlButtonControl Then
            If btnShape.Name Like "btnPrevMonth_*" Or btnShape.Name Like "btnNextMonth_*" Or _
               btnShape.Name Like "btnDelTask_*" Or btnShape.Name Like "btnShowSub_*" Then
                btnShape.Delete
            End If
        End If
    Next btnShape
    
    Dim lastColToClear As Long
    lastColToClear = Columns("IV").Column
    
    If dataStartRow <= Rows.Count And ganttStartColNum <= lastColToClear Then
        On Error Resume Next
        With wsCalendar.Range(wsCalendar.Cells(dataStartRow, ganttStartColNum), wsCalendar.Cells(Rows.Count, lastColToClear))
            .ClearContents
            .Interior.ColorIndex = xlNone
            .Borders.LineStyle = xlNone
            .Font.ColorIndex = xlAutomatic
        End With
        If Err.Number <> 0 Then Debug.Print "DrawCalendar: Error clearing Gantt area - " & Err.Description: Err.Clear
        On Error GoTo 0
    End If
    
    If ganttStartColNum <= lastColToClear Then
        On Error Resume Next
        With wsCalendar.Range(wsCalendar.Cells(1, ganttStartColNum), wsCalendar.Cells(CALENDAR_HEADER_ROWS, lastColToClear))
            .ClearContents
            .Interior.ColorIndex = xlNone
            .Borders.LineStyle = xlNone
            .Font.Bold = True
            .Font.ColorIndex = xlAutomatic
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        If Err.Number <> 0 Then Debug.Print "DrawCalendar: Error clearing Header area - " & Err.Description: Err.Clear
        On Error GoTo 0
    End If

    numMonthsToDisplay = 2
    ganttEndColNum = ganttStartColNum - 1
    todayColNum = 0
    lastTaskRow = GetLastDataRow(wsCalendar, "C")

    Dim firstDateOfNextMonth As Date
    For c = 0 To (numMonthsToDisplay * 35) - 1
        tempDate = DateAdd("d", c, gCalendarStartDate)
        
        Dim endDisplayMonth As Date
        endDisplayMonth = DateSerial(Year(DateAdd("m", numMonthsToDisplay - 1, gCalendarStartDate)), Month(DateAdd("m", numMonthsToDisplay - 1, gCalendarStartDate)), 1)
        firstDateOfNextMonth = DateAdd("m", 1, endDisplayMonth)

        If tempDate >= firstDateOfNextMonth Then
             If Day(tempDate) = 1 Or c = 0 Then
             Else
                ganttEndColNum = ganttStartColNum + c - 1
                Exit For
             End If
        End If

        If ganttStartColNum + c > Columns("IV").Column Then
            ganttEndColNum = Columns("IV").Column
            Exit For
        End If

        wsCalendar.Cells(1, ganttStartColNum + c).Value = Month(tempDate)
        wsCalendar.Cells(1, ganttStartColNum + c).NumberFormat = "0"
        wsCalendar.Cells(2, ganttStartColNum + c).Value = Day(tempDate)
        wsCalendar.Cells(2, ganttStartColNum + c).NumberFormat = "d"
        
        With wsCalendar.Range(wsCalendar.Cells(1, ganttStartColNum + c), wsCalendar.Cells(CALENDAR_HEADER_ROWS, ganttStartColNum + c))
            If tempDate = Date Then
                .Font.Bold = True
                .Font.Color = vbRed
                .Interior.Color = RGB(255, 255, 180)
                todayColNum = ganttStartColNum + c
            End If
            If Day(tempDate) = 1 Then
                 If c > 0 Then
                    .Borders(xlEdgeLeft).LineStyle = xlContinuous
                    .Borders(xlEdgeLeft).Weight = xlThick
                    .Borders(xlEdgeLeft).Color = vbBlack
                 End If
            End If
        End With
        
        If c > 0 And Month(tempDate) <> Month(DateAdd("d", -1, tempDate)) Then
             With wsCalendar.Range(wsCalendar.Cells(1, ganttStartColNum + c), wsCalendar.Cells(CALENDAR_HEADER_ROWS, ganttStartColNum + c))
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).Weight = xlThick
                .Borders(xlEdgeLeft).Color = vbBlack
                .Interior.Color = COLOR_MONTH_HEADER_BG
             End With
             If lastTaskRow >= dataStartRow Then
                With wsCalendar.Range(wsCalendar.Cells(dataStartRow, ganttStartColNum + c), wsCalendar.Cells(lastTaskRow, ganttStartColNum + c))
                    .Borders(xlEdgeLeft).LineStyle = xlContinuous
                    .Borders(xlEdgeLeft).Weight = xlMedium
                    .Borders(xlEdgeLeft).Color = RGB(220, 220, 220)
                End With
             End If
        End If
        ganttEndColNum = ganttStartColNum + c
        If tempDate >= DateAdd("m", numMonthsToDisplay, gCalendarStartDate) And Day(tempDate) > 1 Then
             If Month(tempDate) > Month(DateAdd("m", numMonthsToDisplay - 1, gCalendarStartDate)) And Year(tempDate) >= Year(DateAdd("m", numMonthsToDisplay - 1, gCalendarStartDate)) Then
                 If Day(tempDate) > 1 Then
                    ganttEndColNum = ganttStartColNum + c - 1
                    Exit For
                 End If
             End If
        End If
    Next c

    If ganttEndColNum < ganttStartColNum And numMonthsToDisplay > 0 Then
         Dim actualEndDate As Date
         actualEndDate = DateAdd("d", -1, DateAdd("m", numMonthsToDisplay, DateSerial(Year(gCalendarStartDate), Month(gCalendarStartDate), 1)))
         ganttEndColNum = ganttStartColNum + DateDiff("d", gCalendarStartDate, actualEndDate)
         If ganttEndColNum > Columns("IV").Column Then ganttEndColNum = Columns("IV").Column
    ElseIf numMonthsToDisplay <= 0 Then
         ganttEndColNum = ganttStartColNum - 1
    End If
    If ganttEndColNum > Columns("IV").Column Then ganttEndColNum = Columns("IV").Column

    If lastTaskRow < dataStartRow Then lastTaskRow = dataStartRow - 1

    If ganttEndColNum >= ganttStartColNum Then
        For r = dataStartRow To lastTaskRow
            If Trim(CStr(wsCalendar.Cells(r, "C").Value)) = "" Then Exit For
            
            Dim taskNameCurrentRow As String
            taskNameCurrentRow = Trim(CStr(wsCalendar.Cells(r, "C").Value))
            
            Dim btnDel As Button, btnSub As Button
            Set btnDel = CreateButton(wsCalendar, wsCalendar.Cells(r, "A"), "×", "M_Calendar.DeleteTask_FromButton", , wsCalendar.Rows(r).Height * 0.9, 8, "btnDelTask_" & r)
            
            Dim submissionPctText As String
            submissionPctText = GetTaskSubmissionPercentage(taskNameCurrentRow, GetSheet(SUBMISSION_SHEET_NAME), CDate(wsCalendar.Cells(r, "F").Value))
            Set btnSub = CreateButton(wsCalendar, wsCalendar.Cells(r, "H"), submissionPctText, "M_Calendar.ShowTaskSubmissionStatus_FromButton", , wsCalendar.Rows(r).Height * 0.9, 8, "btnShowSub_" & r)

            If IsDate(wsCalendar.Cells(r, "E").Value) And IsDate(wsCalendar.Cells(r, "F").Value) Then
                taskStartDate = CDate(wsCalendar.Cells(r, "E").Value)
                taskEndDate = CDate(wsCalendar.Cells(r, "F").Value)

                For c = 0 To (ganttEndColNum - ganttStartColNum)
                    currentDate = DateAdd("d", c, gCalendarStartDate)
                    If currentDate >= taskStartDate And currentDate <= taskEndDate Then
                        With wsCalendar.Cells(r, ganttStartColNum + c)
                            .Interior.Color = COLOR_GANTT_BAR
                            .Borders(xlEdgeTop).LineStyle = xlDot
                            .Borders(xlEdgeTop).Color = vbWhite
                            .Borders(xlEdgeBottom).LineStyle = xlDot
                            .Borders(xlEdgeBottom).Color = vbWhite
                            .Borders(xlEdgeLeft).LineStyle = xlDot
                            .Borders(xlEdgeLeft).Color = vbWhite
                            .Borders(xlEdgeRight).LineStyle = xlDot
                            .Borders(xlEdgeRight).Color = vbWhite
                        End With
                    End If
                Next c
            End If
        Next r
    End If
    
    Call UpdateReminders(wsCalendar)

    Dim navButtonCell As Range
    Dim buttonHeight As Double
    Dim navButtonStartRow As Long, navButtonEndRow As Long

    ' REM MODIFIED: ナビゲーションボタンの表示行を調整
    navButtonStartRow = dataStartRow ' 常にデータ開始行から
    If lastTaskRow >= dataStartRow Then ' タスクが1つ以上ある場合
        navButtonEndRow = lastTaskRow   ' 最終タスク行まで
    Else ' タスクがない場合
        navButtonEndRow = dataStartRow   ' データ開始行の1行分の高さ
    End If
    
    ' 前月ボタン
    Set navButtonCell = wsCalendar.Range("I" & navButtonStartRow & ":I" & navButtonEndRow)
    
    If Not navButtonCell Is Nothing Then
        buttonHeight = navButtonCell.Height
        If navButtonCell.Cells.CountLarge > 1 Then
            Application.DisplayAlerts = False
            navButtonCell.Merge
            Application.DisplayAlerts = True
        End If
        navButtonCell.VerticalAlignment = xlCenter
        navButtonCell.HorizontalAlignment = xlCenter
        
        Dim btnPrev As Button
        Set btnPrev = CreateButton(wsCalendar, navButtonCell, "前月", "M_Calendar.PrevMonth_Click", wsCalendar.Columns("I").Width, buttonHeight, 10, "btnPrevMonth_" & Format(Now, "yyyymmddhhmmss"))
    End If
    
    ' 次月ボタン
    If ganttEndColNum > 0 And ganttEndColNum < Columns("IV").Column Then
        Dim nextMonthButtonColRange As Range
        Dim nextButtonCol As Long
        nextButtonCol = ganttEndColNum + 1
        
        Set nextMonthButtonColRange = wsCalendar.Range(wsCalendar.Cells(navButtonStartRow, nextButtonCol), wsCalendar.Cells(navButtonEndRow, nextButtonCol))
        
        If Not nextMonthButtonColRange Is Nothing Then
            buttonHeight = nextMonthButtonColRange.Height
            If nextMonthButtonColRange.Cells.CountLarge > 1 Then
                Application.DisplayAlerts = False
                nextMonthButtonColRange.Merge
                Application.DisplayAlerts = True
            End If
            wsCalendar.Columns(nextButtonCol).ColumnWidth = 5
            nextMonthButtonColRange.VerticalAlignment = xlCenter
            nextMonthButtonColRange.HorizontalAlignment = xlCenter

            Dim btnNext As Button
            Set btnNext = CreateButton(wsCalendar, nextMonthButtonColRange, "次月", "M_Calendar.NextMonth_Click", wsCalendar.Columns(nextButtonCol).Width, buttonHeight, 10, "btnNextMonth_" & Format(Now, "yyyymmddhhmmss"))
        End If
    End If
    
    Application.ScreenUpdating = True
End Sub

Public Sub UpdateReminders(wsCalendar As Worksheet)
    Dim lastTaskDataRow As Long
    Dim i As Long
    Dim deadlineDate As Date
    Dim daysDiff As Long
    Dim dataStartRow As Long
    
    dataStartRow = CALENDAR_HEADER_ROWS + 1
    
    If wsCalendar Is Nothing Then
        Set wsCalendar = GetSheet(CALENDAR_SHEET_NAME)
        If wsCalendar Is Nothing Then
            ShowError "UpdateReminders: カレンダーシートの取得に失敗しました。"
            Exit Sub
        End If
    End If

    lastTaskDataRow = GetLastDataRow(wsCalendar, "C")
    If lastTaskDataRow < dataStartRow Then Exit Sub

    For i = dataStartRow To lastTaskDataRow
        wsCalendar.Cells(i, "B").Interior.ColorIndex = xlNone
        wsCalendar.Cells(i, "B").Value = ""

        If Trim(CStr(wsCalendar.Cells(i, "C").Value)) <> "" Then
            If IsDate(wsCalendar.Cells(i, "F").Value) Then
                deadlineDate = CDate(wsCalendar.Cells(i, "F").Value)
                If deadlineDate >= Date Then
                    daysDiff = DateDiff("d", Date, deadlineDate)
                    Select Case daysDiff
                        Case 0:
                            wsCalendar.Cells(i, "B").Interior.Color = COLOR_REMINDER_1DAY
                            wsCalendar.Cells(i, "B").Value = "当日"
                        Case 1:
                            wsCalendar.Cells(i, "B").Interior.Color = COLOR_REMINDER_1DAY
                            wsCalendar.Cells(i, "B").Value = "１日前"
                        Case 2:
                            wsCalendar.Cells(i, "B").Interior.Color = COLOR_REMINDER_2DAYS
                            wsCalendar.Cells(i, "B").Value = "２日前"
                        Case 3:
                            wsCalendar.Cells(i, "B").Interior.Color = COLOR_REMINDER_3DAYS
                            wsCalendar.Cells(i, "B").Value = "３日前"
                    End Select
                Else
                     wsCalendar.Cells(i, "B").Interior.Color = RGB(128, 128, 128)
                     wsCalendar.Cells(i, "B").Value = "超過"
                End If
            End If
        End If
    Next i
End Sub

Public Sub RefreshCalendar_Click()
    gCalendarStartDate = Date
    Call DrawCalendar
End Sub

Public Sub PrevMonth_Click()
    gCalendarStartDate = DateAdd("m", -1, gCalendarStartDate)
    Call DrawCalendar
End Sub

Public Sub NextMonth_Click()
    gCalendarStartDate = DateAdd("m", 1, gCalendarStartDate)
    Call DrawCalendar
End Sub


Public Sub DeleteTask_FromButton()
    Dim btn As Object
    Dim taskRow As Long
    Dim wsCalendar As Worksheet
    Dim wsSubmission As Worksheet
    Dim taskName As String
    Dim response As VbMsgBoxResult
    Dim dataStartRow As Long

    dataStartRow = CALENDAR_HEADER_ROWS + 1

    On Error Resume Next
    Set btn = ActiveSheet.Shapes(Application.Caller)
    If btn Is Nothing Then Set btn = ActiveSheet.Buttons(Application.Caller)
    On Error GoTo 0

    If btn Is Nothing Then
        ShowError "ボタンの特定に失敗しました。Caller: " & Application.Caller
        Exit Sub
    End If

    Set wsCalendar = GetSheet(CALENDAR_SHEET_NAME)
    If wsCalendar Is Nothing Then Exit Sub
    Set wsSubmission = GetSheet(SUBMISSION_SHEET_NAME)
    If wsSubmission Is Nothing Then Exit Sub

    taskRow = btn.TopLeftCell.Row
    If taskRow < dataStartRow Then Exit Sub

    taskName = Trim(CStr(wsCalendar.Cells(taskRow, "C").Value))

    response = MsgBox("タスク「" & taskName & "」を削除しますか？" & vbCrLf & _
                      "関連する提出状況データも削除（クリア）されます。", _
                      vbYesNo + vbQuestion, "削除確認")

    If response = vbYes Then
        Application.ScreenUpdating = False
        Application.EnableEvents = False

        wsCalendar.Rows(taskRow).Delete Shift:=xlUp

        Call M_Submission.DeleteTaskSubmissionColumns(wsSubmission, taskName)

        Call DrawCalendar
        
        If Not wsSubmission Is Nothing Then
            If gSubmissionViewMode = VIEW_MODE_ALL_TASKS Then
                Call M_Submission.ShowAllTasksInSubmission_Click
            ElseIf gSelectedTaskNameForFilter = taskName Then
                Call M_Submission.ClearSubmissionSingleTaskView(wsSubmission)
                gSelectedTaskNameForFilter = ""
            Else
                Call M_Submission.UpdateSubmissionSheetView
            End If
        End If

        Application.EnableEvents = True
        Application.ScreenUpdating = True
        ShowMessage "タスク「" & taskName & "」を削除しました。"
    End If
End Sub

Public Sub ShowTaskSubmissionStatus_FromButton()
    Dim btn As Object
    Dim taskRow As Long
    Dim wsCalendar As Worksheet
    Dim taskName As String
    Dim dataStartRow As Long

    dataStartRow = CALENDAR_HEADER_ROWS + 1

    On Error Resume Next
    Set btn = ActiveSheet.Shapes(Application.Caller)
    If btn Is Nothing Then Set btn = ActiveSheet.Buttons(Application.Caller)
    On Error GoTo 0

    If btn Is Nothing Then
        ShowError "ボタンの特定に失敗しました。Caller: " & Application.Caller
        Exit Sub
    End If

    Set wsCalendar = GetSheet(CALENDAR_SHEET_NAME)
    If wsCalendar Is Nothing Then Exit Sub

    taskRow = btn.TopLeftCell.Row
    If taskRow < dataStartRow Then Exit Sub
    
    taskName = Trim(CStr(wsCalendar.Cells(taskRow, "C").Value))
    If taskName = "" Then
        ShowError "タスク名が空です。処理を中断します。"
        Exit Sub
    End If
    
    gSelectedTaskNameForFilter = taskName
    gSubmissionViewMode = VIEW_MODE_SINGLE_TASK
    
    Call M_Submission.UpdateSubmissionSheetView
    
    Dim wsSubmission As Worksheet
    Set wsSubmission = GetSheet(SUBMISSION_SHEET_NAME)
    If Not wsSubmission Is Nothing Then
        wsSubmission.Activate
    Else
        ShowError "シート「" & SUBMISSION_SHEET_NAME & "」が見つかりません。"
    End If
End Sub

Private Function GetTaskSubmissionPercentage(taskName As String, wsSubmission As Worksheet, taskDeadline As Date) As String
    Dim submissionCols As Collection
    Dim i As Long, muniRow As Long
    Dim totalVisibleMuniCount As Long, submittedMuniCount As Long
    Dim submissionStatusCol As Long
    Dim muniListStartRow As Long

    GetTaskSubmissionPercentage = "0%"
    If wsSubmission Is Nothing Or Trim(taskName) = "" Then Exit Function
    If Not gMuniListInitialized Then Exit Function

    Set submissionCols = FindTaskSubmissionColumns(taskName, wsSubmission)
    If submissionCols Is Nothing Then
        Debug.Print "GetTaskSubmissionPercentage: Submission columns not found for task '" & taskName & "'."
        Exit Function
    ElseIf submissionCols.Count <> 2 Then
        Debug.Print "GetTaskSubmissionPercentage: Invalid submission columns count for task '" & taskName & "'."
        Exit Function
    End If
    submissionStatusCol = submissionCols(2)

    totalVisibleMuniCount = 0
    submittedMuniCount = 0
    muniListStartRow = MUNILIST_HEADER_ROW + 1
    muniRow = muniListStartRow

    For i = LBound(gMuniList) To UBound(gMuniList)
        If muniRow > wsSubmission.Rows.Count Then Exit For

        If Not wsSubmission.Rows(muniRow).Hidden And Not gMuniList(i).FilterOut Then
            totalVisibleMuniCount = totalVisibleMuniCount + 1
            If wsSubmission.Cells(muniRow, submissionStatusCol).Value = "○" Then
                submittedMuniCount = submittedMuniCount + 1
            End If
        End If
        muniRow = muniRow + 1
    Next i

    If totalVisibleMuniCount > 0 Then
        GetTaskSubmissionPercentage = Round((submittedMuniCount / totalVisibleMuniCount) * 100, 0) & "%"
    Else
        GetTaskSubmissionPercentage = "0%"
    End If
End Function

